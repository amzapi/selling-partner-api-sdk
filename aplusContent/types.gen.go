// Package aplusContent provides primitives to interact the openapi HTTP API.
//
// Code generated by go-sdk-codegen DO NOT EDIT.
package aplusContent

import (
	"time"
)

// AplusPaginatedResponse defines model for AplusPaginatedResponse.
type AplusPaginatedResponse struct {
	// Embedded struct due to allOf(#/components/schemas/AplusResponse)
	AplusResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// A page token that is returned when the results of the call exceed the page size. To get another page of results, call the operation again, passing in this value with the pageToken parameter.
	NextPageToken *PageToken `json:"nextPageToken,omitempty"`
}

// AplusResponse defines model for AplusResponse.
type AplusResponse struct {

	// A set of messages to the user, such as warnings or comments.
	Warnings *MessageSet `json:"warnings,omitempty"`
}

// Asin defines model for Asin.
type Asin string

// AsinBadge defines model for AsinBadge.
type AsinBadge string

// List of AsinBadge
const (
	AsinBadge_BRAND_NOT_ELIGIBLE    AsinBadge = "BRAND_NOT_ELIGIBLE"
	AsinBadge_CATALOG_NOT_FOUND     AsinBadge = "CATALOG_NOT_FOUND"
	AsinBadge_CONTENT_NOT_PUBLISHED AsinBadge = "CONTENT_NOT_PUBLISHED"
	AsinBadge_CONTENT_PUBLISHED     AsinBadge = "CONTENT_PUBLISHED"
)

// AsinBadgeSet defines model for AsinBadgeSet.
type AsinBadgeSet []AsinBadge

// AsinMetadata defines model for AsinMetadata.
type AsinMetadata struct {

	// The Amazon Standard Identification Number (ASIN).
	Asin Asin `json:"asin"`

	// The set of ASIN badges.
	BadgeSet *AsinBadgeSet `json:"badgeSet,omitempty"`

	// A set of content reference keys.
	ContentReferenceKeySet *ContentReferenceKeySet `json:"contentReferenceKeySet,omitempty"`

	// The default image for the ASIN in the Amazon catalog.
	ImageUrl *string `json:"imageUrl,omitempty"`

	// The Amazon Standard Identification Number (ASIN).
	Parent *Asin `json:"parent,omitempty"`

	// The title for the ASIN in the Amazon catalog.
	Title *string `json:"title,omitempty"`
}

// AsinMetadataSet defines model for AsinMetadataSet.
type AsinMetadataSet []AsinMetadata

// AsinSet defines model for AsinSet.
type AsinSet []Asin

// ColorType defines model for ColorType.
type ColorType string

// List of ColorType
const (
	ColorType_DARK  ColorType = "DARK"
	ColorType_LIGHT ColorType = "LIGHT"
)

// ContentBadge defines model for ContentBadge.
type ContentBadge string

// List of ContentBadge
const (
	ContentBadge_BULK      ContentBadge = "BULK"
	ContentBadge_GENERATED ContentBadge = "GENERATED"
	ContentBadge_LAUNCHPAD ContentBadge = "LAUNCHPAD"
	ContentBadge_PREMIUM   ContentBadge = "PREMIUM"
	ContentBadge_STANDARD  ContentBadge = "STANDARD"
)

// ContentBadgeSet defines model for ContentBadgeSet.
type ContentBadgeSet []ContentBadge

// ContentDocument defines model for ContentDocument.
type ContentDocument struct {

	// A list of A+ Content modules.
	ContentModuleList ContentModuleList `json:"contentModuleList"`

	// The A+ Content document subtype. This represents a special-purpose type of an A+ Content document. Not every A+ Content document type will have a subtype, and subtypes may change at any time.
	ContentSubType *ContentSubType `json:"contentSubType,omitempty"`

	// The A+ Content document type.
	ContentType ContentType `json:"contentType"`

	// The IETF language tag. This only supports the primary language subtag with one secondary language subtag. The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary subtags.
	// **Pattern:** ^[a-z]{2,}-[A-Z0-9]{2,}$
	Locale LanguageTag `json:"locale"`

	// The A+ Content document name.
	Name string `json:"name"`
}

// ContentMetadata defines model for ContentMetadata.
type ContentMetadata struct {

	// The set of content badges.
	BadgeSet ContentBadgeSet `json:"badgeSet"`

	// The identifier for the marketplace where the A+ Content is published.
	MarketplaceId MarketplaceId `json:"marketplaceId"`

	// The A+ Content document name.
	Name string `json:"name"`

	// The submission status of the content document.
	Status ContentStatus `json:"status"`

	// The approximate age of the A+ Content document and metadata.
	UpdateTime time.Time `json:"updateTime"`
}

// ContentMetadataRecord defines model for ContentMetadataRecord.
type ContentMetadataRecord struct {

	// The metadata of an A+ Content document.
	ContentMetadata ContentMetadata `json:"contentMetadata"`

	// A unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.
	ContentReferenceKey ContentReferenceKey `json:"contentReferenceKey"`
}

// ContentMetadataRecordList defines model for ContentMetadataRecordList.
type ContentMetadataRecordList []ContentMetadataRecord

// ContentModule defines model for ContentModule.
type ContentModule struct {

	// The type of A+ Content module.
	ContentModuleType ContentModuleType `json:"contentModuleType"`

	// The standard company logo image.
	StandardCompanyLogo *StandardCompanyLogoModule `json:"standardCompanyLogo,omitempty"`

	// The standard product comparison table.
	StandardComparisonTable *StandardComparisonTableModule `json:"standardComparisonTable,omitempty"`

	// Four standard images with text, presented across a single row.
	StandardFourImageText *StandardFourImageTextModule `json:"standardFourImageText,omitempty"`

	// Four standard images with text, presented on a grid of four quadrants.
	StandardFourImageTextQuadrant *StandardFourImageTextQuadrantModule `json:"standardFourImageTextQuadrant,omitempty"`

	// Standard headline text, an image, and body text.
	StandardHeaderImageText *StandardHeaderImageTextModule `json:"standardHeaderImageText,omitempty"`

	// Two images, two paragraphs, and two bulleted lists. One image is smaller and displayed in the sidebar.
	StandardImageSidebar *StandardImageSidebarModule `json:"standardImageSidebar,omitempty"`

	// A standard background image with a floating text box.
	StandardImageTextOverlay *StandardImageTextOverlayModule `json:"standardImageTextOverlay,omitempty"`

	// Standard images with text, presented one at a time. The user clicks on thumbnails to view each block.
	StandardMultipleImageText *StandardMultipleImageTextModule `json:"standardMultipleImageText,omitempty"`

	// Standard product description text.
	StandardProductDescription *StandardProductDescriptionModule `json:"standardProductDescription,omitempty"`

	// A standard image with several paragraphs and a bulleted list.
	StandardSingleImageHighlights *StandardSingleImageHighlightsModule `json:"standardSingleImageHighlights,omitempty"`

	// A standard image with paragraphs and a bulleted list, and extra space for technical details.
	StandardSingleImageSpecsDetail *StandardSingleImageSpecsDetailModule `json:"standardSingleImageSpecsDetail,omitempty"`

	// A standard headline and body text with an image on the side.
	StandardSingleSideImage *StandardSingleSideImageModule `json:"standardSingleSideImage,omitempty"`

	// The standard table of technical feature names and definitions.
	StandardTechSpecs *StandardTechSpecsModule `json:"standardTechSpecs,omitempty"`

	// A standard headline and body text.
	StandardText *StandardTextModule `json:"standardText,omitempty"`

	// Three standard images with text, presented across a single row.
	StandardThreeImageText *StandardThreeImageTextModule `json:"standardThreeImageText,omitempty"`
}

// ContentModuleList defines model for ContentModuleList.
type ContentModuleList []ContentModule

// ContentModuleType defines model for ContentModuleType.
type ContentModuleType string

// List of ContentModuleType
const (
	ContentModuleType_STANDARD_COMPANY_LOGO              ContentModuleType = "STANDARD_COMPANY_LOGO"
	ContentModuleType_STANDARD_COMPARISON_TABLE          ContentModuleType = "STANDARD_COMPARISON_TABLE"
	ContentModuleType_STANDARD_FOUR_IMAGE_TEXT           ContentModuleType = "STANDARD_FOUR_IMAGE_TEXT"
	ContentModuleType_STANDARD_FOUR_IMAGE_TEXT_QUADRANT  ContentModuleType = "STANDARD_FOUR_IMAGE_TEXT_QUADRANT"
	ContentModuleType_STANDARD_HEADER_IMAGE_TEXT         ContentModuleType = "STANDARD_HEADER_IMAGE_TEXT"
	ContentModuleType_STANDARD_IMAGE_SIDEBAR             ContentModuleType = "STANDARD_IMAGE_SIDEBAR"
	ContentModuleType_STANDARD_IMAGE_TEXT_OVERLAY        ContentModuleType = "STANDARD_IMAGE_TEXT_OVERLAY"
	ContentModuleType_STANDARD_MULTIPLE_IMAGE_TEXT       ContentModuleType = "STANDARD_MULTIPLE_IMAGE_TEXT"
	ContentModuleType_STANDARD_PRODUCT_DESCRIPTION       ContentModuleType = "STANDARD_PRODUCT_DESCRIPTION"
	ContentModuleType_STANDARD_SINGLE_IMAGE_HIGHLIGHTS   ContentModuleType = "STANDARD_SINGLE_IMAGE_HIGHLIGHTS"
	ContentModuleType_STANDARD_SINGLE_IMAGE_SPECS_DETAIL ContentModuleType = "STANDARD_SINGLE_IMAGE_SPECS_DETAIL"
	ContentModuleType_STANDARD_SINGLE_SIDE_IMAGE         ContentModuleType = "STANDARD_SINGLE_SIDE_IMAGE"
	ContentModuleType_STANDARD_TECH_SPECS                ContentModuleType = "STANDARD_TECH_SPECS"
	ContentModuleType_STANDARD_TEXT                      ContentModuleType = "STANDARD_TEXT"
	ContentModuleType_STANDARD_THREE_IMAGE_TEXT          ContentModuleType = "STANDARD_THREE_IMAGE_TEXT"
)

// ContentRecord defines model for ContentRecord.
type ContentRecord struct {

	// The A+ Content document. This is the enhanced content that is published to product detail pages.
	ContentDocument *ContentDocument `json:"contentDocument,omitempty"`

	// The metadata of an A+ Content document.
	ContentMetadata *ContentMetadata `json:"contentMetadata,omitempty"`

	// A unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.
	ContentReferenceKey ContentReferenceKey `json:"contentReferenceKey"`
}

// ContentRecordList defines model for ContentRecordList.
type ContentRecordList []ContentRecord

// ContentReferenceKey defines model for ContentReferenceKey.
type ContentReferenceKey string

// ContentReferenceKeySet defines model for ContentReferenceKeySet.
type ContentReferenceKeySet []ContentReferenceKey

// ContentStatus defines model for ContentStatus.
type ContentStatus string

// List of ContentStatus
const (
	ContentStatus_APPROVED  ContentStatus = "APPROVED"
	ContentStatus_DRAFT     ContentStatus = "DRAFT"
	ContentStatus_REJECTED  ContentStatus = "REJECTED"
	ContentStatus_SUBMITTED ContentStatus = "SUBMITTED"
)

// ContentSubType defines model for ContentSubType.
type ContentSubType string

// ContentType defines model for ContentType.
type ContentType string

// List of ContentType
const (
	ContentType_EBC ContentType = "EBC"
	ContentType_EMC ContentType = "EMC"
)

// Decorator defines model for Decorator.
type Decorator struct {

	// The relative intensity or variation of this decorator. Decorators such as bullet-points, for example, can have multiple indentation depths.
	Depth *int `json:"depth,omitempty"`

	// The number of content characters to alter with this decorator. Decorators such as line breaks can have zero length and fit between characters.
	Length *int `json:"length,omitempty"`

	// The starting character of this decorator within the content string. Use zero for the first character.
	Offset *int `json:"offset,omitempty"`

	// The type of rich text decorator.
	Type *DecoratorType `json:"type,omitempty"`
}

// DecoratorSet defines model for DecoratorSet.
type DecoratorSet []Decorator

// DecoratorType defines model for DecoratorType.
type DecoratorType string

// List of DecoratorType
const (
	DecoratorType_LIST_ITEM       DecoratorType = "LIST_ITEM"
	DecoratorType_LIST_ORDERED    DecoratorType = "LIST_ORDERED"
	DecoratorType_LIST_UNORDERED  DecoratorType = "LIST_UNORDERED"
	DecoratorType_STYLE_BOLD      DecoratorType = "STYLE_BOLD"
	DecoratorType_STYLE_ITALIC    DecoratorType = "STYLE_ITALIC"
	DecoratorType_STYLE_LINEBREAK DecoratorType = "STYLE_LINEBREAK"
	DecoratorType_STYLE_PARAGRAPH DecoratorType = "STYLE_PARAGRAPH"
	DecoratorType_STYLE_UNDERLINE DecoratorType = "STYLE_UNDERLINE"
)

// Error defines model for Error.
type Error struct {

	// The code that identifies the type of error condition.
	Code string `json:"code"`

	// Additional information, if available, to clarify the error condition.
	Details *string `json:"details,omitempty"`

	// A human readable description of the error condition.
	Message string `json:"message"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors []Error `json:"errors"`
}

// GetContentDocumentIncludedDataType defines model for GetContentDocumentIncludedDataType.
type GetContentDocumentIncludedDataType string

// List of GetContentDocumentIncludedDataType
const (
	GetContentDocumentIncludedDataType_CONTENTS GetContentDocumentIncludedDataType = "CONTENTS"
	GetContentDocumentIncludedDataType_METADATA GetContentDocumentIncludedDataType = "METADATA"
)

// GetContentDocumentResponse defines model for GetContentDocumentResponse.
type GetContentDocumentResponse struct {
	// Embedded struct due to allOf(#/components/schemas/AplusResponse)
	AplusResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// A content document with additional information for content management.
	ContentRecord ContentRecord `json:"contentRecord"`
}

// ImageComponent defines model for ImageComponent.
type ImageComponent struct {

	// The alternative text for the image.
	AltText string `json:"altText"`

	// The instructions for optionally cropping an image. If no cropping is desired, set the dimensions to the original image size. If the image is cropped and no offset values are provided, then the coordinates of the top left corner of the cropped image, relative to the original image, are defaulted to (0,0).
	ImageCropSpecification ImageCropSpecification `json:"imageCropSpecification"`

	// This identifier is provided by the Selling Partner API for Uploads.
	UploadDestinationId string `json:"uploadDestinationId"`
}

// ImageCropSpecification defines model for ImageCropSpecification.
type ImageCropSpecification struct {

	// The top left corner of the cropped image, specified in the original image's coordinate space.
	Offset *ImageOffsets `json:"offset,omitempty"`

	// The dimensions extending from the top left corner of the cropped image, or the top left corner of the original image if there is no cropping. Only `pixels` is allowed as the units value for ImageDimensions.
	Size ImageDimensions `json:"size"`
}

// ImageDimensions defines model for ImageDimensions.
type ImageDimensions struct {

	// A whole number dimension and its unit of measurement. For example, this can represent 100 pixels.
	Height IntegerWithUnits `json:"height"`

	// A whole number dimension and its unit of measurement. For example, this can represent 100 pixels.
	Width IntegerWithUnits `json:"width"`
}

// ImageOffsets defines model for ImageOffsets.
type ImageOffsets struct {

	// A whole number dimension and its unit of measurement. For example, this can represent 100 pixels.
	X IntegerWithUnits `json:"x"`

	// A whole number dimension and its unit of measurement. For example, this can represent 100 pixels.
	Y IntegerWithUnits `json:"y"`
}

// IntegerWithUnits defines model for IntegerWithUnits.
type IntegerWithUnits struct {

	// The unit of measurement.
	Units string `json:"units"`

	// The dimension value.
	Value int `json:"value"`
}

// LanguageTag defines model for LanguageTag.
type LanguageTag string

// ListContentDocumentAsinRelationsIncludedDataType defines model for ListContentDocumentAsinRelationsIncludedDataType.
type ListContentDocumentAsinRelationsIncludedDataType string

// List of ListContentDocumentAsinRelationsIncludedDataType
const (
	ListContentDocumentAsinRelationsIncludedDataType_METADATA ListContentDocumentAsinRelationsIncludedDataType = "METADATA"
)

// ListContentDocumentAsinRelationsResponse defines model for ListContentDocumentAsinRelationsResponse.
type ListContentDocumentAsinRelationsResponse struct {
	// Embedded struct due to allOf(#/components/schemas/AplusPaginatedResponse)
	AplusPaginatedResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// The set of ASIN metadata.
	AsinMetadataSet AsinMetadataSet `json:"asinMetadataSet"`
}

// MarketplaceId defines model for MarketplaceId.
type MarketplaceId string

// MessageSet defines model for MessageSet.
type MessageSet []Error

// PageToken defines model for PageToken.
type PageToken string

// ParagraphComponent defines model for ParagraphComponent.
type ParagraphComponent struct {
	TextList []TextComponent `json:"textList"`
}

// PlainTextItem defines model for PlainTextItem.
type PlainTextItem struct {

	// The rank or index of this text item within the collection. Different items cannot occupy the same position within a single collection.
	Position int `json:"position"`

	// The actual plain text.
	Value string `json:"value"`
}

// PositionType defines model for PositionType.
type PositionType string

// List of PositionType
const (
	PositionType_LEFT  PositionType = "LEFT"
	PositionType_RIGHT PositionType = "RIGHT"
)

// PostContentDocumentApprovalSubmissionResponse defines model for PostContentDocumentApprovalSubmissionResponse.
type PostContentDocumentApprovalSubmissionResponse struct {
	// Embedded struct due to allOf(#/components/schemas/AplusResponse)
	AplusResponse `yaml:",inline"`
}

// PostContentDocumentAsinRelationsRequest defines model for PostContentDocumentAsinRelationsRequest.
type PostContentDocumentAsinRelationsRequest struct {

	// The set of ASINs.
	AsinSet AsinSet `json:"asinSet"`
}

// PostContentDocumentAsinRelationsResponse defines model for PostContentDocumentAsinRelationsResponse.
type PostContentDocumentAsinRelationsResponse struct {
	// Embedded struct due to allOf(#/components/schemas/AplusResponse)
	AplusResponse `yaml:",inline"`
}

// PostContentDocumentRequest defines model for PostContentDocumentRequest.
type PostContentDocumentRequest struct {

	// The A+ Content document. This is the enhanced content that is published to product detail pages.
	ContentDocument ContentDocument `json:"contentDocument"`
}

// PostContentDocumentResponse defines model for PostContentDocumentResponse.
type PostContentDocumentResponse struct {
	// Embedded struct due to allOf(#/components/schemas/AplusResponse)
	AplusResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// A unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.
	ContentReferenceKey ContentReferenceKey `json:"contentReferenceKey"`
}

// PostContentDocumentSuspendSubmissionResponse defines model for PostContentDocumentSuspendSubmissionResponse.
type PostContentDocumentSuspendSubmissionResponse struct {
	// Embedded struct due to allOf(#/components/schemas/AplusResponse)
	AplusResponse `yaml:",inline"`
}

// PublishRecord defines model for PublishRecord.
type PublishRecord struct {

	// The Amazon Standard Identification Number (ASIN).
	Asin Asin `json:"asin"`

	// A unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.
	ContentReferenceKey ContentReferenceKey `json:"contentReferenceKey"`

	// The A+ Content document subtype. This represents a special-purpose type of an A+ Content document. Not every A+ Content document type will have a subtype, and subtypes may change at any time.
	ContentSubType *ContentSubType `json:"contentSubType,omitempty"`

	// The A+ Content document type.
	ContentType ContentType `json:"contentType"`

	// The IETF language tag. This only supports the primary language subtag with one secondary language subtag. The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary subtags.
	// **Pattern:** ^[a-z]{2,}-[A-Z0-9]{2,}$
	Locale LanguageTag `json:"locale"`

	// The identifier for the marketplace where the A+ Content is published.
	MarketplaceId MarketplaceId `json:"marketplaceId"`
}

// PublishRecordList defines model for PublishRecordList.
type PublishRecordList []PublishRecord

// SearchContentDocumentsResponse defines model for SearchContentDocumentsResponse.
type SearchContentDocumentsResponse struct {
	// Embedded struct due to allOf(#/components/schemas/AplusPaginatedResponse)
	AplusPaginatedResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// A list of A+ Content metadata records.
	ContentMetadataRecords ContentMetadataRecordList `json:"contentMetadataRecords"`
}

// SearchContentPublishRecordsResponse defines model for SearchContentPublishRecordsResponse.
type SearchContentPublishRecordsResponse struct {
	// Embedded struct due to allOf(#/components/schemas/AplusPaginatedResponse)
	AplusPaginatedResponse `yaml:",inline"`
	// Embedded fields due to inline allOf schema

	// A list of A+ Content publishing records.
	PublishRecordList PublishRecordList `json:"publishRecordList"`
}

// StandardCompanyLogoModule defines model for StandardCompanyLogoModule.
type StandardCompanyLogoModule struct {

	// A reference to an image, hosted in the A+ Content media library.
	CompanyLogo ImageComponent `json:"companyLogo"`
}

// StandardComparisonProductBlock defines model for StandardComparisonProductBlock.
type StandardComparisonProductBlock struct {

	// The Amazon Standard Identification Number (ASIN).
	Asin *Asin `json:"asin,omitempty"`

	// Determines whether this block of content is visually highlighted.
	Highlight *bool `json:"highlight,omitempty"`

	// A reference to an image, hosted in the A+ Content media library.
	Image *ImageComponent `json:"image,omitempty"`

	// Comparison metrics for the product.
	Metrics *[]PlainTextItem `json:"metrics,omitempty"`

	// The rank or index of this comparison product block within the module. Different blocks cannot occupy the same position within a single module.
	Position int `json:"position"`

	// The comparison product title.
	Title *string `json:"title,omitempty"`
}

// StandardComparisonTableModule defines model for StandardComparisonTableModule.
type StandardComparisonTableModule struct {
	MetricRowLabels *[]PlainTextItem                  `json:"metricRowLabels,omitempty"`
	ProductColumns  *[]StandardComparisonProductBlock `json:"productColumns,omitempty"`
}

// StandardFourImageTextModule defines model for StandardFourImageTextModule.
type StandardFourImageTextModule struct {

	// The A+ Content standard image and text box block.
	Block1 *StandardImageTextBlock `json:"block1,omitempty"`

	// The A+ Content standard image and text box block.
	Block2 *StandardImageTextBlock `json:"block2,omitempty"`

	// The A+ Content standard image and text box block.
	Block3 *StandardImageTextBlock `json:"block3,omitempty"`

	// The A+ Content standard image and text box block.
	Block4 *StandardImageTextBlock `json:"block4,omitempty"`

	// Rich text content.
	Headline *TextComponent `json:"headline,omitempty"`
}

// StandardFourImageTextQuadrantModule defines model for StandardFourImageTextQuadrantModule.
type StandardFourImageTextQuadrantModule struct {

	// The A+ Content standard image and text box block.
	Block1 StandardImageTextBlock `json:"block1"`

	// The A+ Content standard image and text box block.
	Block2 StandardImageTextBlock `json:"block2"`

	// The A+ Content standard image and text box block.
	Block3 StandardImageTextBlock `json:"block3"`

	// The A+ Content standard image and text box block.
	Block4 StandardImageTextBlock `json:"block4"`
}

// StandardHeaderImageTextModule defines model for StandardHeaderImageTextModule.
type StandardHeaderImageTextModule struct {

	// The A+ Content standard image and text box block.
	Block *StandardImageTextBlock `json:"block,omitempty"`

	// Rich text content.
	Headline *TextComponent `json:"headline,omitempty"`
}

// StandardHeaderTextListBlock defines model for StandardHeaderTextListBlock.
type StandardHeaderTextListBlock struct {

	// The A+ Content standard fixed length list of text, usually presented as bullet points.
	Block *StandardTextListBlock `json:"block,omitempty"`

	// Rich text content.
	Headline *TextComponent `json:"headline,omitempty"`
}

// StandardImageCaptionBlock defines model for StandardImageCaptionBlock.
type StandardImageCaptionBlock struct {

	// Rich text content.
	Caption *TextComponent `json:"caption,omitempty"`

	// A reference to an image, hosted in the A+ Content media library.
	Image *ImageComponent `json:"image,omitempty"`
}

// StandardImageSidebarModule defines model for StandardImageSidebarModule.
type StandardImageSidebarModule struct {

	// The A+ Content standard fixed length list of text, usually presented as bullet points.
	DescriptionListBlock *StandardTextListBlock `json:"descriptionListBlock,omitempty"`

	// The A+ Content standard text box block, comprised of a paragraph with a headline.
	DescriptionTextBlock *StandardTextBlock `json:"descriptionTextBlock,omitempty"`

	// Rich text content.
	Headline *TextComponent `json:"headline,omitempty"`

	// The A+ Content standard image and caption block.
	ImageCaptionBlock *StandardImageCaptionBlock `json:"imageCaptionBlock,omitempty"`

	// The A+ Content standard image and text box block.
	SidebarImageTextBlock *StandardImageTextBlock `json:"sidebarImageTextBlock,omitempty"`

	// The A+ Content standard fixed length list of text, usually presented as bullet points.
	SidebarListBlock *StandardTextListBlock `json:"sidebarListBlock,omitempty"`
}

// StandardImageTextBlock defines model for StandardImageTextBlock.
type StandardImageTextBlock struct {

	// A list of rich text content, usually presented in a text box.
	Body *ParagraphComponent `json:"body,omitempty"`

	// Rich text content.
	Headline *TextComponent `json:"headline,omitempty"`

	// A reference to an image, hosted in the A+ Content media library.
	Image *ImageComponent `json:"image,omitempty"`
}

// StandardImageTextCaptionBlock defines model for StandardImageTextCaptionBlock.
type StandardImageTextCaptionBlock struct {

	// The A+ Content standard image and text box block.
	Block *StandardImageTextBlock `json:"block,omitempty"`

	// Rich text content.
	Caption *TextComponent `json:"caption,omitempty"`
}

// StandardImageTextOverlayModule defines model for StandardImageTextOverlayModule.
type StandardImageTextOverlayModule struct {

	// The A+ Content standard image and text box block.
	Block *StandardImageTextBlock `json:"block,omitempty"`

	// The relative color scheme of content.
	OverlayColorType ColorType `json:"overlayColorType"`
}

// StandardMultipleImageTextModule defines model for StandardMultipleImageTextModule.
type StandardMultipleImageTextModule struct {
	Blocks *[]StandardImageTextCaptionBlock `json:"blocks,omitempty"`
}

// StandardProductDescriptionModule defines model for StandardProductDescriptionModule.
type StandardProductDescriptionModule struct {

	// A list of rich text content, usually presented in a text box.
	Body ParagraphComponent `json:"body"`
}

// StandardSingleImageHighlightsModule defines model for StandardSingleImageHighlightsModule.
type StandardSingleImageHighlightsModule struct {

	// The A+ standard fixed-length list of text, with a related headline.
	BulletedListBlock *StandardHeaderTextListBlock `json:"bulletedListBlock,omitempty"`

	// Rich text content.
	Headline *TextComponent `json:"headline,omitempty"`

	// A reference to an image, hosted in the A+ Content media library.
	Image *ImageComponent `json:"image,omitempty"`

	// The A+ Content standard text box block, comprised of a paragraph with a headline.
	TextBlock1 *StandardTextBlock `json:"textBlock1,omitempty"`

	// The A+ Content standard text box block, comprised of a paragraph with a headline.
	TextBlock2 *StandardTextBlock `json:"textBlock2,omitempty"`

	// The A+ Content standard text box block, comprised of a paragraph with a headline.
	TextBlock3 *StandardTextBlock `json:"textBlock3,omitempty"`
}

// StandardSingleImageSpecsDetailModule defines model for StandardSingleImageSpecsDetailModule.
type StandardSingleImageSpecsDetailModule struct {

	// The A+ Content standard text box block, comprised of a paragraph with a headline.
	DescriptionBlock1 *StandardTextBlock `json:"descriptionBlock1,omitempty"`

	// The A+ Content standard text box block, comprised of a paragraph with a headline.
	DescriptionBlock2 *StandardTextBlock `json:"descriptionBlock2,omitempty"`

	// Rich text content.
	DescriptionHeadline *TextComponent `json:"descriptionHeadline,omitempty"`

	// Rich text content.
	Headline *TextComponent `json:"headline,omitempty"`

	// A reference to an image, hosted in the A+ Content media library.
	Image *ImageComponent `json:"image,omitempty"`

	// Rich text content.
	SpecificationHeadline *TextComponent `json:"specificationHeadline,omitempty"`

	// The A+ standard fixed-length list of text, with a related headline.
	SpecificationListBlock *StandardHeaderTextListBlock `json:"specificationListBlock,omitempty"`

	// The A+ Content standard text box block, comprised of a paragraph with a headline.
	SpecificationTextBlock *StandardTextBlock `json:"specificationTextBlock,omitempty"`
}

// StandardSingleSideImageModule defines model for StandardSingleSideImageModule.
type StandardSingleSideImageModule struct {

	// The A+ Content standard image and text box block.
	Block *StandardImageTextBlock `json:"block,omitempty"`

	// The relative positioning of content.
	ImagePositionType PositionType `json:"imagePositionType"`
}

// StandardTechSpecsModule defines model for StandardTechSpecsModule.
type StandardTechSpecsModule struct {

	// Rich text content.
	Headline *TextComponent `json:"headline,omitempty"`

	// The specification list.
	SpecificationList []StandardTextPairBlock `json:"specificationList"`

	// The number of tables to present. Features are evenly divided between the tables.
	TableCount *int `json:"tableCount,omitempty"`
}

// StandardTextBlock defines model for StandardTextBlock.
type StandardTextBlock struct {

	// A list of rich text content, usually presented in a text box.
	Body *ParagraphComponent `json:"body,omitempty"`

	// Rich text content.
	Headline *TextComponent `json:"headline,omitempty"`
}

// StandardTextListBlock defines model for StandardTextListBlock.
type StandardTextListBlock struct {
	TextList []TextItem `json:"textList"`
}

// StandardTextModule defines model for StandardTextModule.
type StandardTextModule struct {

	// A list of rich text content, usually presented in a text box.
	Body ParagraphComponent `json:"body"`

	// Rich text content.
	Headline *TextComponent `json:"headline,omitempty"`
}

// StandardTextPairBlock defines model for StandardTextPairBlock.
type StandardTextPairBlock struct {

	// Rich text content.
	Description *TextComponent `json:"description,omitempty"`

	// Rich text content.
	Label *TextComponent `json:"label,omitempty"`
}

// StandardThreeImageTextModule defines model for StandardThreeImageTextModule.
type StandardThreeImageTextModule struct {

	// The A+ Content standard image and text box block.
	Block1 *StandardImageTextBlock `json:"block1,omitempty"`

	// The A+ Content standard image and text box block.
	Block2 *StandardImageTextBlock `json:"block2,omitempty"`

	// The A+ Content standard image and text box block.
	Block3 *StandardImageTextBlock `json:"block3,omitempty"`

	// Rich text content.
	Headline *TextComponent `json:"headline,omitempty"`
}

// TextComponent defines model for TextComponent.
type TextComponent struct {

	// A set of content decorators.
	DecoratorSet *DecoratorSet `json:"decoratorSet,omitempty"`

	// The actual plain text.
	Value string `json:"value"`
}

// TextItem defines model for TextItem.
type TextItem struct {

	// The rank or index of this text item within the collection. Different items cannot occupy the same position within a single collection.
	Position int `json:"position"`

	// Rich text content.
	Text TextComponent `json:"text"`
}

// ValidateContentDocumentAsinRelationsResponse defines model for ValidateContentDocumentAsinRelationsResponse.
type ValidateContentDocumentAsinRelationsResponse struct {
	// Embedded struct due to allOf(#/components/schemas/AplusResponse)
	AplusResponse `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/ErrorList)
	ErrorList `yaml:",inline"`
}

// Asin defines model for asin.
type Asin string

// AsinSet defines model for asinSet.
type AsinSet []string

// ContentReferenceKey defines model for contentReferenceKey.
type ContentReferenceKey string

// GetContentDocumentIncludedDataSet defines model for getContentDocumentIncludedDataSet.
type GetContentDocumentIncludedDataSet []string

// ListContentDocumentAsinRelationsIncludedDataSet defines model for listContentDocumentAsinRelationsIncludedDataSet.
type ListContentDocumentAsinRelationsIncludedDataSet []string

// MarketplaceId defines model for marketplaceId.
type MarketplaceId string

// PageToken defines model for pageToken.
type PageToken string

// ValidateContentDocumentAsinRelationsJSONBody defines parameters for ValidateContentDocumentAsinRelations.
type ValidateContentDocumentAsinRelationsJSONBody PostContentDocumentRequest

// ValidateContentDocumentAsinRelationsParams defines parameters for ValidateContentDocumentAsinRelations.
type ValidateContentDocumentAsinRelationsParams struct {

	// The identifier for the marketplace where the A+ Content is published.
	MarketplaceId string `json:"marketplaceId"`

	// The set of ASINs.
	AsinSet *[]string `json:"asinSet,omitempty"`
}

// SearchContentDocumentsParams defines parameters for SearchContentDocuments.
type SearchContentDocumentsParams struct {

	// The identifier for the marketplace where the A+ Content is published.
	MarketplaceId string `json:"marketplaceId"`

	// A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.
	PageToken *string `json:"pageToken,omitempty"`
}

// CreateContentDocumentJSONBody defines parameters for CreateContentDocument.
type CreateContentDocumentJSONBody PostContentDocumentRequest

// CreateContentDocumentParams defines parameters for CreateContentDocument.
type CreateContentDocumentParams struct {

	// The identifier for the marketplace where the A+ Content is published.
	MarketplaceId string `json:"marketplaceId"`
}

// GetContentDocumentParams defines parameters for GetContentDocument.
type GetContentDocumentParams struct {

	// The identifier for the marketplace where the A+ Content is published.
	MarketplaceId string `json:"marketplaceId"`

	// The set of A+ Content data types to include in the response.
	IncludedDataSet []string `json:"includedDataSet"`
}

// UpdateContentDocumentJSONBody defines parameters for UpdateContentDocument.
type UpdateContentDocumentJSONBody PostContentDocumentRequest

// UpdateContentDocumentParams defines parameters for UpdateContentDocument.
type UpdateContentDocumentParams struct {

	// The identifier for the marketplace where the A+ Content is published.
	MarketplaceId string `json:"marketplaceId"`
}

// PostContentDocumentApprovalSubmissionParams defines parameters for PostContentDocumentApprovalSubmission.
type PostContentDocumentApprovalSubmissionParams struct {

	// The identifier for the marketplace where the A+ Content is published.
	MarketplaceId string `json:"marketplaceId"`
}

// ListContentDocumentAsinRelationsParams defines parameters for ListContentDocumentAsinRelations.
type ListContentDocumentAsinRelationsParams struct {

	// The identifier for the marketplace where the A+ Content is published.
	MarketplaceId string `json:"marketplaceId"`

	// The set of A+ Content data types to include in the response. If you do not include this parameter, the operation returns the related ASINs without metadata.
	IncludedDataSet *[]string `json:"includedDataSet,omitempty"`

	// The set of ASINs.
	AsinSet *[]string `json:"asinSet,omitempty"`

	// A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.
	PageToken *string `json:"pageToken,omitempty"`
}

// PostContentDocumentAsinRelationsJSONBody defines parameters for PostContentDocumentAsinRelations.
type PostContentDocumentAsinRelationsJSONBody PostContentDocumentAsinRelationsRequest

// PostContentDocumentAsinRelationsParams defines parameters for PostContentDocumentAsinRelations.
type PostContentDocumentAsinRelationsParams struct {

	// The identifier for the marketplace where the A+ Content is published.
	MarketplaceId string `json:"marketplaceId"`
}

// PostContentDocumentSuspendSubmissionParams defines parameters for PostContentDocumentSuspendSubmission.
type PostContentDocumentSuspendSubmissionParams struct {

	// The identifier for the marketplace where the A+ Content is published.
	MarketplaceId string `json:"marketplaceId"`
}

// SearchContentPublishRecordsParams defines parameters for SearchContentPublishRecords.
type SearchContentPublishRecordsParams struct {

	// The identifier for the marketplace where the A+ Content is published.
	MarketplaceId string `json:"marketplaceId"`

	// The Amazon Standard Identification Number (ASIN).
	Asin string `json:"asin"`

	// A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.
	PageToken *string `json:"pageToken,omitempty"`
}

// ValidateContentDocumentAsinRelationsRequestBody defines body for ValidateContentDocumentAsinRelations for application/json ContentType.
type ValidateContentDocumentAsinRelationsJSONRequestBody ValidateContentDocumentAsinRelationsJSONBody

// CreateContentDocumentRequestBody defines body for CreateContentDocument for application/json ContentType.
type CreateContentDocumentJSONRequestBody CreateContentDocumentJSONBody

// UpdateContentDocumentRequestBody defines body for UpdateContentDocument for application/json ContentType.
type UpdateContentDocumentJSONRequestBody UpdateContentDocumentJSONBody

// PostContentDocumentAsinRelationsRequestBody defines body for PostContentDocumentAsinRelations for application/json ContentType.
type PostContentDocumentAsinRelationsJSONRequestBody PostContentDocumentAsinRelationsJSONBody
