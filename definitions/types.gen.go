// Package definitions provides primitives to interact the openapi HTTP API.
//
// Code generated by go-sdk-codegen DO NOT EDIT.
package definitions

import (
	"encoding/json"
	"fmt"

	"github.com/pkg/errors"
)

// Error defines model for Error.
type Error struct {

	// An error code that identifies the type of error that occurred.
	Code string `json:"code"`

	// Additional details that can help the caller understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// A message that describes the error condition.
	Message string `json:"message"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	Errors []Error `json:"errors"`
}

// ProductType defines model for ProductType.
type ProductType struct {

	// The Amazon marketplace identifiers for which the product type definition is available.
	MarketplaceIds []string `json:"marketplaceIds"`

	// The name of the Amazon product type.
	Name string `json:"name"`
}

// ProductTypeDefinition defines model for ProductTypeDefinition.
type ProductTypeDefinition struct {

	// Locale of the display elements contained in the product type definition.
	Locale string `json:"locale"`

	// Amazon marketplace identifiers for which the product type definition is applicable.
	MarketplaceIds []string    `json:"marketplaceIds"`
	MetaSchema     *SchemaLink `json:"metaSchema,omitempty"`

	// The name of the Amazon product type that this product type definition applies to.
	ProductType string `json:"productType"`

	// The version details for an Amazon product type.
	ProductTypeVersion ProductTypeVersion `json:"productTypeVersion"`

	// Mapping of property group names to property groups. Property groups represent logical groupings of schema properties that can be used for display or informational purposes.
	PropertyGroups ProductTypeDefinition_PropertyGroups `json:"propertyGroups"`

	// Name of the requirements set represented in this product type definition.
	Requirements string `json:"requirements"`

	// Identifies if the required attributes for a requirements set are enforced by the product type definition schema. Non-enforced requirements enable structural validation of individual attributes without all of the required attributes being present (such as for partial updates).
	RequirementsEnforced string     `json:"requirementsEnforced"`
	Schema               SchemaLink `json:"schema"`
}

// ProductTypeDefinition_PropertyGroups defines model for ProductTypeDefinition.PropertyGroups.
type ProductTypeDefinition_PropertyGroups struct {
	AdditionalProperties map[string]PropertyGroup `json:"-"`
}

// ProductTypeList defines model for ProductTypeList.
type ProductTypeList struct {
	ProductTypes []ProductType `json:"productTypes"`
}

// ProductTypeVersion defines model for ProductTypeVersion.
type ProductTypeVersion struct {

	// When true, the version indicated by the version identifier is the latest available for the Amazon product type.
	Latest bool `json:"latest"`

	// When true, the version indicated by the version identifier is the prerelease (release candidate) for the Amazon product type.
	ReleaseCandidate *bool `json:"releaseCandidate,omitempty"`

	// Version identifier.
	Version string `json:"version"`
}

// PropertyGroup defines model for PropertyGroup.
type PropertyGroup struct {

	// The description of the property group.
	Description *string `json:"description,omitempty"`

	// The names of the schema properties for the property group.
	PropertyNames *[]string `json:"propertyNames,omitempty"`

	// The display label of the property group.
	Title *string `json:"title,omitempty"`
}

// SchemaLink defines model for SchemaLink.
type SchemaLink struct {

	// Checksum hash of the schema (Base64 MD5). Can be used to verify schema contents, identify changes between schema versions, and for caching.
	Checksum string `json:"checksum"`

	// Link to retrieve the schema.
	Link struct {

		// URI resource for the link.
		Resource string `json:"resource"`

		// HTTP method for the link operation.
		Verb string `json:"verb"`
	} `json:"link"`
}

// SearchDefinitionsProductTypesParams defines parameters for SearchDefinitionsProductTypes.
type SearchDefinitionsProductTypesParams struct {

	// A comma-delimited list of keywords to search product types by.
	Keywords *[]string `json:"keywords,omitempty"`

	// A comma-delimited list of Amazon marketplace identifiers for the request.
	MarketplaceIds []string `json:"marketplaceIds"`
}

// GetDefinitionsProductTypeParams defines parameters for GetDefinitionsProductType.
type GetDefinitionsProductTypeParams struct {

	// A selling partner identifier. When provided, seller-specific requirements and values are populated within the product type definition schema, such as brand names associated with the selling partner.
	SellerId *string `json:"sellerId,omitempty"`

	// A comma-delimited list of Amazon marketplace identifiers for the request.
	MarketplaceIds []string `json:"marketplaceIds"`

	// The version of the Amazon product type to retrieve. Defaults to "LATEST",. Prerelease versions of product type definitions may be retrieved with "RELEASE_CANDIDATE". If no prerelease version is currently available, the "LATEST" live version will be provided.
	ProductTypeVersion *string `json:"productTypeVersion,omitempty"`

	// The name of the requirements set to retrieve requirements for.
	Requirements *string `json:"requirements,omitempty"`

	// Identifies if the required attributes for a requirements set are enforced by the product type definition schema. Non-enforced requirements enable structural validation of individual attributes without all the required attributes being present (such as for partial updates).
	RequirementsEnforced *string `json:"requirementsEnforced,omitempty"`

	// Locale for retrieving display labels and other presentation details. Defaults to the default language of the first marketplace in the request.
	Locale *string `json:"locale,omitempty"`
}

// Getter for additional properties for ProductTypeDefinition_PropertyGroups. Returns the specified
// element and whether it was found
func (a ProductTypeDefinition_PropertyGroups) Get(fieldName string) (value PropertyGroup, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProductTypeDefinition_PropertyGroups
func (a *ProductTypeDefinition_PropertyGroups) Set(fieldName string, value PropertyGroup) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]PropertyGroup)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProductTypeDefinition_PropertyGroups to handle AdditionalProperties
func (a *ProductTypeDefinition_PropertyGroups) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]PropertyGroup)
		for fieldName, fieldBuf := range object {
			var fieldVal PropertyGroup
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProductTypeDefinition_PropertyGroups to handle AdditionalProperties
func (a ProductTypeDefinition_PropertyGroups) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}
