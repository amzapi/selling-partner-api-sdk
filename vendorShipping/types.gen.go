// Package vendorShipping provides primitives to interact the openapi HTTP API.
//
// Code generated by go-sdk-codegen DO NOT EDIT.
package vendorShipping

import (
	"time"
)

// Address defines model for Address.
type Address struct {

	// First line of the address.
	AddressLine1 string `json:"addressLine1"`

	// Additional street address information, if required.
	AddressLine2 *string `json:"addressLine2,omitempty"`

	// Additional street address information, if required.
	AddressLine3 *string `json:"addressLine3,omitempty"`

	// The city where the person, business or institution is located.
	City *string `json:"city,omitempty"`

	// The two digit country code in ISO 3166-1 alpha-2 format.
	CountryCode string `json:"countryCode"`

	// The county where person, business or institution is located.
	County *string `json:"county,omitempty"`

	// The district where person, business or institution is located.
	District *string `json:"district,omitempty"`

	// The name of the person, business or institution at that address.
	Name string `json:"name"`

	// The phone number of the person, business or institution located at that address.
	Phone *string `json:"phone,omitempty"`

	// The postal code of that address. It contains a series of letters or digits or both, sometimes including spaces or punctuation.
	PostalCode *string `json:"postalCode,omitempty"`

	// The state or region where person, business or institution is located.
	StateOrRegion *string `json:"stateOrRegion,omitempty"`
}

// Carton defines model for Carton.
type Carton struct {

	// A list of carton identifiers.
	CartonIdentifiers *[]ContainerIdentification `json:"cartonIdentifiers,omitempty"`

	// Carton sequence number for the carton. The first carton will be 001, the second 002, and so on. This number is used as a reference to refer to this carton from the pallet level.
	CartonSequenceNumber string `json:"cartonSequenceNumber"`

	// Physical dimensional measurements of a container.
	Dimensions *Dimensions `json:"dimensions,omitempty"`

	// A list of container item details.
	Items []ContainerItem `json:"items"`

	// This is required to be provided for every carton in the small parcel shipments.
	TrackingNumber *string `json:"trackingNumber,omitempty"`

	// The weight.
	Weight *Weight `json:"weight,omitempty"`
}

// CartonReferenceDetails defines model for CartonReferenceDetails.
type CartonReferenceDetails struct {

	// Pallet level carton count is mandatory for single item pallet and optional for mixed item pallet.
	CartonCount *int `json:"cartonCount,omitempty"`

	// Array of reference numbers for the carton that are part of this pallet/shipment. Please provide the cartonSequenceNumber from the 'cartons' segment to refer to that carton's details here.
	CartonReferenceNumbers []string `json:"cartonReferenceNumbers"`
}

// ContainerIdentification defines model for ContainerIdentification.
type ContainerIdentification struct {

	// Container identification number that adheres to the definition of the container identification type.
	ContainerIdentificationNumber string `json:"containerIdentificationNumber"`

	// The container identification type.
	ContainerIdentificationType string `json:"containerIdentificationType"`
}

// ContainerItem defines model for ContainerItem.
type ContainerItem struct {

	// Item details for be provided for every item in shipment at either the item or carton or pallet level, whichever is appropriate.
	ItemDetails *ItemDetails `json:"itemDetails,omitempty"`

	// The reference number for the item. Please provide the itemSequenceNumber from the 'items' segment to refer to that item's details here.
	ItemReference string `json:"itemReference"`

	// Details of item quantity.
	ShippedQuantity ItemQuantity `json:"shippedQuantity"`
}

// Decimal defines model for Decimal.
type Decimal string

// Dimensions defines model for Dimensions.
type Dimensions struct {

	// A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. <br>**Pattern** : `^-?(0|([1-9]\d*))(\.\d+)?([eE][+-]?\d+)?$`.
	Height Decimal `json:"height"`

	// A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. <br>**Pattern** : `^-?(0|([1-9]\d*))(\.\d+)?([eE][+-]?\d+)?$`.
	Length Decimal `json:"length"`

	// The unit of measure for dimensions.
	UnitOfMeasure string `json:"unitOfMeasure"`

	// A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. <br>**Pattern** : `^-?(0|([1-9]\d*))(\.\d+)?([eE][+-]?\d+)?$`.
	Width Decimal `json:"width"`
}

// Duration defines model for Duration.
type Duration struct {

	// Unit for duration.
	DurationUnit string `json:"durationUnit"`

	// Value for the duration in terms of the durationUnit.
	DurationValue int `json:"durationValue"`
}

// Error defines model for Error.
type Error struct {

	// An error code that identifies the type of error that occurred.
	Code string `json:"code"`

	// Additional details that can help the caller understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// A message that describes the error condition.
	Message string `json:"message"`
}

// ErrorList defines model for ErrorList.
type ErrorList []Error

// Expiry defines model for Expiry.
type Expiry struct {
	ExpiryAfterDuration *Duration `json:"expiryAfterDuration,omitempty"`

	// The date that determines the limit of consumption or use of a product. Its meaning is determined based on the trade item context.
	ExpiryDate *time.Time `json:"expiryDate,omitempty"`

	// Production, packaging or assembly date determined by the manufacturer. Its meaning is determined based on the trade item context.
	ManufacturerDate *time.Time `json:"manufacturerDate,omitempty"`
}

// ImportDetails defines model for ImportDetails.
type ImportDetails struct {

	// The weight.
	BillableWeight *Weight `json:"billableWeight,omitempty"`

	// Date on which the shipment is expected to be shipped. This value should not be in the past and not more than 60 days out in the future.
	EstimatedShipByDate *time.Time `json:"estimatedShipByDate,omitempty"`

	// Types and numbers of container(s) for import purchase orders. Can be a comma-separated list if shipment has multiple containers.
	ImportContainers *string `json:"importContainers,omitempty"`

	// This is used for import purchase orders only. If the recipient requests, this field will contain the shipment method of payment.
	MethodOfPayment *string `json:"methodOfPayment,omitempty"`

	// This is used only for direct import shipment confirmations.
	Route *Route `json:"route,omitempty"`

	// The container's seal number.
	SealNumber *string `json:"sealNumber,omitempty"`
}

// Item defines model for Item.
type Item struct {

	// Amazon Standard Identification Number (ASIN) of an item.
	AmazonProductIdentifier *string `json:"amazonProductIdentifier,omitempty"`

	// Item details for be provided for every item in shipment at either the item or carton or pallet level, whichever is appropriate.
	ItemDetails *ItemDetails `json:"itemDetails,omitempty"`

	// Item sequence number for the item. The first item will be 001, the second 002, and so on. This number is used as a reference to refer to this item from the carton or pallet level.
	ItemSequenceNumber string `json:"itemSequenceNumber"`

	// Details of item quantity.
	ShippedQuantity ItemQuantity `json:"shippedQuantity"`

	// The vendor selected product identification of the item. Should be the same as was sent in the purchase order.
	VendorProductIdentifier *string `json:"vendorProductIdentifier,omitempty"`
}

// ItemDetails defines model for ItemDetails.
type ItemDetails struct {
	Expiry *Expiry `json:"expiry,omitempty"`

	// Identification of the instructions on how specified item/carton/pallet should be handled.
	HandlingCode *string `json:"handlingCode,omitempty"`

	// The batch or lot number associates an item with information the manufacturer considers relevant for traceability of the trade item to which the Element String is applied. The data may refer to the trade item itself or to items contained. This field is mandatory for all perishable items.
	LotNumber *string `json:"lotNumber,omitempty"`

	// An amount of money, including units in the form of currency.
	MaximumRetailPrice *Money `json:"maximumRetailPrice,omitempty"`

	// The Amazon purchase order number for the shipment being confirmed. If the items in this shipment belong to multiple purchase order numbers that are in particular carton or pallet within the shipment, then provide the purchaseOrderNumber at the appropriate carton or pallet level. Formatting Notes: 8-character alpha-numeric code.
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`
}

// ItemQuantity defines model for ItemQuantity.
type ItemQuantity struct {

	// Amount of units shipped for a specific item at a shipment level. If the item is present only in certain cartons or pallets within the shipment, please provide this at the appropriate carton or pallet level.
	Amount int `json:"amount"`

	// Unit of measure for the shipped quantity.
	UnitOfMeasure string `json:"unitOfMeasure"`

	// The case size, in the event that we ordered using cases. Otherwise, 1.
	UnitSize *int `json:"unitSize,omitempty"`
}

// Location defines model for Location.
type Location struct {

	// The two digit country code. In ISO 3166-1 alpha-2 format.
	CountryCode *string `json:"countryCode,omitempty"`

	// Location code.
	LocationCode *string `json:"locationCode,omitempty"`

	// Type of location identification.
	Type *string `json:"type,omitempty"`
}

// Money defines model for Money.
type Money struct {

	// A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. <br>**Pattern** : `^-?(0|([1-9]\d*))(\.\d+)?([eE][+-]?\d+)?$`.
	Amount Decimal `json:"amount"`

	// Three digit currency code in ISO 4217 format.
	CurrencyCode string `json:"currencyCode"`
}

// Pallet defines model for Pallet.
type Pallet struct {

	// Number of cartons per layer on the pallet.
	Block                  *int                    `json:"block,omitempty"`
	CartonReferenceDetails *CartonReferenceDetails `json:"cartonReferenceDetails,omitempty"`

	// Physical dimensional measurements of a container.
	Dimensions *Dimensions `json:"dimensions,omitempty"`

	// A list of container item details.
	Items *[]ContainerItem `json:"items,omitempty"`

	// A list of pallet identifiers.
	PalletIdentifiers []ContainerIdentification `json:"palletIdentifiers"`

	// Number of layers per pallet.
	Tier *int `json:"tier,omitempty"`

	// The weight.
	Weight *Weight `json:"weight,omitempty"`
}

// PartyIdentification defines model for PartyIdentification.
type PartyIdentification struct {

	// Address of the party.
	Address *Address `json:"address,omitempty"`

	// Assigned identification for the party.
	PartyId string `json:"partyId"`

	// Tax registration details of the entity.
	TaxRegistrationDetails *[]TaxRegistrationDetails `json:"taxRegistrationDetails,omitempty"`
}

// Route defines model for Route.
type Route struct {
	Stops []Stop `json:"stops"`
}

// ShipmentConfirmation defines model for ShipmentConfirmation.
type ShipmentConfirmation struct {

	// The Amazon Reference Number is a unique identifier generated by Amazon for all Collect/WePay shipments when you submit  a routing request. This field is mandatory for Collect/WePay shipments.
	AmazonReferenceNumber *string `json:"amazonReferenceNumber,omitempty"`

	// A list of the cartons in this shipment.
	Cartons *[]Carton `json:"cartons,omitempty"`

	// The date and time on which the shipment is expected to reach buyer's warehouse. It needs to be an estimate based on the average transit time between ship from location and the destination. The exact appointment time will be provided by the buyer and is potentially not known when creating the shipment confirmation.
	EstimatedDeliveryDate *time.Time     `json:"estimatedDeliveryDate,omitempty"`
	ImportDetails         *ImportDetails `json:"importDetails,omitempty"`

	// A list of the pallets in this shipment.
	Pallets       *[]Pallet           `json:"pallets,omitempty"`
	SellingParty  PartyIdentification `json:"sellingParty"`
	ShipFromParty PartyIdentification `json:"shipFromParty"`
	ShipToParty   PartyIdentification `json:"shipToParty"`

	// Date on which the shipment confirmation was submitted.
	ShipmentConfirmationDate time.Time `json:"shipmentConfirmationDate"`

	// Indicates if this shipment confirmation is the initial confirmation, or intended to replace an already posted shipment confirmation. If replacing an existing shipment confirmation, be sure to provide the identical shipmentIdentifier and sellingParty information as in the previous confirmation.
	ShipmentConfirmationType string `json:"shipmentConfirmationType"`

	// Unique shipment ID (not used over the last 365 days).
	ShipmentIdentifier string `json:"shipmentIdentifier"`

	// Shipment measurement details.
	ShipmentMeasurements *ShipmentMeasurements `json:"shipmentMeasurements,omitempty"`

	// Shipment hierarchical structure.
	ShipmentStructure *string `json:"shipmentStructure,omitempty"`

	// The type of shipment.
	ShipmentType *string `json:"shipmentType,omitempty"`

	// The date and time of the departure of the shipment from the vendor's location. Vendors are requested to send ASNs within 30 minutes of departure from their warehouse/distribution center or at least 6 hours prior to the appointment time at the Amazon destination warehouse, whichever is sooner. Shipped date mentioned in the shipment confirmation should not be in the future.
	ShippedDate *time.Time `json:"shippedDate,omitempty"`

	// A list of the items in this shipment and their associated details. If any of the item detail fields are common at a carton or a pallet level, provide them at the corresponding carton or pallet level.
	ShippedItems          []Item                 `json:"shippedItems"`
	TransportationDetails *TransportationDetails `json:"transportationDetails,omitempty"`
}

// ShipmentMeasurements defines model for ShipmentMeasurements.
type ShipmentMeasurements struct {

	// Number of cartons present in the shipment. Provide the cartonCount only for unpalletized shipments.
	CartonCount *int `json:"cartonCount,omitempty"`

	// The weight.
	GrossShipmentWeight *Weight `json:"grossShipmentWeight,omitempty"`

	// Number of pallets present in the shipment. Provide the palletCount only for palletized shipments.
	PalletCount *int `json:"palletCount,omitempty"`

	// The volume of the container.
	ShipmentVolume *Volume `json:"shipmentVolume,omitempty"`
}

// Stop defines model for Stop.
type Stop struct {

	// Date and time of the arrival of the cargo.
	ArrivalTime *time.Time `json:"arrivalTime,omitempty"`

	// Date and time of the departure of the cargo.
	DepartureTime *time.Time `json:"departureTime,omitempty"`

	// Provide the function code.
	FunctionCode string `json:"functionCode"`

	// Location identifier.
	LocationIdentification *Location `json:"locationIdentification,omitempty"`
}

// SubmitShipmentConfirmationsRequest defines model for SubmitShipmentConfirmationsRequest.
type SubmitShipmentConfirmationsRequest struct {
	ShipmentConfirmations *[]ShipmentConfirmation `json:"shipmentConfirmations,omitempty"`
}

// SubmitShipmentConfirmationsResponse defines model for SubmitShipmentConfirmationsResponse.
type SubmitShipmentConfirmationsResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors  *ErrorList            `json:"errors,omitempty"`
	Payload *TransactionReference `json:"payload,omitempty"`
}

// TaxRegistrationDetails defines model for TaxRegistrationDetails.
type TaxRegistrationDetails struct {

	// Tax registration number for the entity. For example, VAT ID.
	TaxRegistrationNumber string `json:"taxRegistrationNumber"`

	// Tax registration type for the entity.
	TaxRegistrationType string `json:"taxRegistrationType"`
}

// TransactionReference defines model for TransactionReference.
type TransactionReference struct {

	// GUID assigned by Amazon to identify this transaction. This value can be used with the Transaction Status API to return the status of this transaction.
	TransactionId *string `json:"transactionId,omitempty"`
}

// TransportationDetails defines model for TransportationDetails.
type TransportationDetails struct {

	// Bill Of Lading (BOL) number is the unique number assigned by the vendor. The BOL present in the Shipment Confirmation message ideally matches the paper BOL provided with the shipment, but that is no must. Instead of BOL, an alternative reference number (like Delivery Note Number) for the shipment can also be sent in this field.
	BillOfLadingNumber *string `json:"billOfLadingNumber,omitempty"`

	// Code that identifies the carrier for the shipment. The Standard Carrier Alpha Code (SCAC) is a unique two to four letter code used to identify a carrier. Carrier SCAC codes are assigned and maintained by the NMFTA (National Motor Freight Association). This field is mandatory for US, CA, MX shipment confirmations.
	CarrierScac *string `json:"carrierScac,omitempty"`

	// The field also known as PRO number is a unique number assigned by the carrier. It is used to identify and track the shipment that goes out for delivery. This field is mandatory for UA, CA, MX shipment confirmations.
	CarrierShipmentReferenceNumber *string `json:"carrierShipmentReferenceNumber,omitempty"`

	// The mode of transportation for this shipment.
	TransportationMode *string `json:"transportationMode,omitempty"`
}

// Volume defines model for Volume.
type Volume struct {

	// The unit of measurement.
	UnitOfMeasure string `json:"unitOfMeasure"`

	// A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. <br>**Pattern** : `^-?(0|([1-9]\d*))(\.\d+)?([eE][+-]?\d+)?$`.
	Value Decimal `json:"value"`
}

// Weight defines model for Weight.
type Weight struct {

	// The unit of measurement.
	UnitOfMeasure string `json:"unitOfMeasure"`

	// A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. <br>**Pattern** : `^-?(0|([1-9]\d*))(\.\d+)?([eE][+-]?\d+)?$`.
	Value Decimal `json:"value"`
}

// SubmitShipmentConfirmationsJSONBody defines parameters for SubmitShipmentConfirmations.
type SubmitShipmentConfirmationsJSONBody SubmitShipmentConfirmationsRequest

// SubmitShipmentConfirmationsRequestBody defines body for SubmitShipmentConfirmations for application/json ContentType.
type SubmitShipmentConfirmationsJSONRequestBody SubmitShipmentConfirmationsJSONBody
