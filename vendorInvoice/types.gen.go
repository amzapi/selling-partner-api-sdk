// Package vendorInvoice provides primitives to interact the openapi HTTP API.
//
// Code generated by go-sdk-codegen DO NOT EDIT.
package vendorInvoice

import (
	"time"
)

// AdditionalDetails defines model for AdditionalDetails.
type AdditionalDetails struct {

	// The detail of the additional information provided by the selling party.
	Detail string `json:"detail"`

	// The language code of the additional information detail.
	LanguageCode *string `json:"languageCode,omitempty"`

	// The type of the additional information provided by the selling party.
	Type string `json:"type"`
}

// Address defines model for Address.
type Address struct {

	// First line of the address.
	AddressLine1 string `json:"addressLine1"`

	// Additional street address information, if required.
	AddressLine2 *string `json:"addressLine2,omitempty"`

	// Additional street address information, if required.
	AddressLine3 *string `json:"addressLine3,omitempty"`

	// The city where the person, business or institution is located.
	City string `json:"city"`

	// The two digit country code in ISO 3166-1 alpha-2 format.
	CountryCode string `json:"countryCode"`

	// The county where person, business or institution is located.
	County *string `json:"county,omitempty"`

	// The district where person, business or institution is located.
	District *string `json:"district,omitempty"`

	// The name of the person, business or institution at that address.
	Name string `json:"name"`

	// The phone number of the person, business or institution located at that address.
	Phone *string `json:"phone,omitempty"`

	// The postal code of that address. It conatins a series of letters or digits or both, sometimes including spaces or punctuation.
	PostalCode string `json:"postalCode"`

	// The state or region where person, business or institution is located.
	StateOrRegion string `json:"stateOrRegion"`
}

// ChargeDetails defines model for ChargeDetails.
type ChargeDetails struct {

	// An amount of money, including units in the form of currency.
	ChargeAmount Money `json:"chargeAmount"`

	// Individual tax details per line item.
	TaxDetails *[]TaxDetail `json:"taxDetails,omitempty"`

	// Type of charge applied.
	Type string `json:"type"`
}

// Decimal defines model for Decimal.
type Decimal string

// Error defines model for Error.
type Error struct {

	// An error code that identifies the type of error that occurred.
	Code string `json:"code"`

	// Additional details that can help the caller understand or fix the issue.
	Details *string `json:"details,omitempty"`

	// A message that describes the error condition.
	Message string `json:"message"`
}

// ErrorList defines model for ErrorList.
type ErrorList []Error

// InvoiceDetail defines model for InvoiceDetail.
type InvoiceDetail struct {

	// Additional details provided by the selling party, for tax related or other purposes.
	AdditionalDetails *[]AdditionalDetails `json:"additionalDetails,omitempty"`
	BillToParty       *PartyIdentification `json:"billToParty,omitempty"`

	// Total charge amount details for all line items.
	ChargeDetails *[]ChargeDetails `json:"chargeDetails,omitempty"`

	// Invoice date.
	InvoiceDate time.Time `json:"invoiceDate"`

	// The unique invoice number.
	InvoiceNumber string `json:"invoiceNumber"`

	// An amount of money, including units in the form of currency.
	InvoiceTotal Money `json:"invoiceTotal"`

	// Provides the details of the items in this invoice.
	Items []InvoiceItem `json:"items"`

	// The payment terms for the invoice.
	PaymentTermsCode *string `json:"paymentTermsCode,omitempty"`

	// An additional unique reference number used for regulatory or other purposes.
	ReferenceNumber *string             `json:"referenceNumber,omitempty"`
	RemitToParty    PartyIdentification `json:"remitToParty"`
	ShipFromParty   PartyIdentification `json:"shipFromParty"`

	// Ship-to country code.
	ShipToCountryCode *string `json:"shipToCountryCode,omitempty"`

	// Individual tax details per line item.
	TaxTotals *[]TaxDetail `json:"taxTotals,omitempty"`
}

// InvoiceItem defines model for InvoiceItem.
type InvoiceItem struct {

	// Buyer's standard identification number (ASIN) of an item.
	BuyerProductIdentifier *string `json:"buyerProductIdentifier,omitempty"`

	// Individual charge details per line item.
	ChargeDetails *[]ChargeDetails `json:"chargeDetails,omitempty"`

	// HSN tax code. The HSN number cannot contain alphabets.
	HsnCode *string `json:"hsnCode,omitempty"`

	// Details of item quantity.
	InvoicedQuantity ItemQuantity `json:"invoicedQuantity"`

	// Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on.
	ItemSequenceNumber string `json:"itemSequenceNumber"`

	// An amount of money, including units in the form of currency.
	NetCost Money `json:"netCost"`

	// The purchase order number for this order. Formatting Notes: 8-character alpha-numeric code.
	PurchaseOrderNumber string `json:"purchaseOrderNumber"`

	// Individual tax details per line item.
	TaxDetails *[]TaxDetail `json:"taxDetails,omitempty"`

	// The vendor's order number for this order.
	VendorOrderNumber *string `json:"vendorOrderNumber,omitempty"`

	// The vendor selected product identification of the item.
	VendorProductIdentifier *string `json:"vendorProductIdentifier,omitempty"`
}

// ItemQuantity defines model for ItemQuantity.
type ItemQuantity struct {

	// Quantity of units available for a specific item.
	Amount int `json:"amount"`

	// Unit of measure for the available quantity.
	UnitOfMeasure string `json:"unitOfMeasure"`
}

// Money defines model for Money.
type Money struct {

	// A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. <br>**Pattern** : `^-?(0|([1-9]\d*))(\.\d+)?([eE][+-]?\d+)?$`.
	Amount Decimal `json:"amount"`

	// Three digit currency code in ISO 4217 format.
	CurrencyCode string `json:"currencyCode"`
}

// PartyIdentification defines model for PartyIdentification.
type PartyIdentification struct {

	// Address of the party.
	Address *Address `json:"address,omitempty"`

	// Assigned Identification for the party.
	PartyId string `json:"partyId"`

	// Tax registration details of the entity.
	TaxRegistrationDetails *[]TaxRegistrationDetail `json:"taxRegistrationDetails,omitempty"`
}

// SubmitInvoiceRequest defines model for SubmitInvoiceRequest.
type SubmitInvoiceRequest struct {
	Invoices *[]InvoiceDetail `json:"invoices,omitempty"`
}

// SubmitInvoiceResponse defines model for SubmitInvoiceResponse.
type SubmitInvoiceResponse struct {

	// A list of error responses returned when a request is unsuccessful.
	Errors  *ErrorList            `json:"errors,omitempty"`
	Payload *TransactionReference `json:"payload,omitempty"`
}

// TaxDetail defines model for TaxDetail.
type TaxDetail struct {

	// An amount of money, including units in the form of currency.
	TaxAmount Money `json:"taxAmount"`

	// A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. <br>**Pattern** : `^-?(0|([1-9]\d*))(\.\d+)?([eE][+-]?\d+)?$`.
	TaxRate *Decimal `json:"taxRate,omitempty"`

	// Type of the tax applied.
	TaxType string `json:"taxType"`

	// An amount of money, including units in the form of currency.
	TaxableAmount *Money `json:"taxableAmount,omitempty"`
}

// TaxRegistrationDetail defines model for TaxRegistrationDetail.
type TaxRegistrationDetail struct {

	// Address of the party.
	TaxRegistrationAddress *Address `json:"taxRegistrationAddress,omitempty"`

	// Tax registration message that can be used for additional tax related details.
	TaxRegistrationMessage *string `json:"taxRegistrationMessage,omitempty"`

	// Tax registration number for the party. For example, VAT ID.
	TaxRegistrationNumber string `json:"taxRegistrationNumber"`

	// Tax registration type for the entity.
	TaxRegistrationType *string `json:"taxRegistrationType,omitempty"`
}

// TransactionReference defines model for TransactionReference.
type TransactionReference struct {

	// GUID to identify this transaction. This value can be used with the Transaction Status API to return the status of this transaction.
	TransactionId *string `json:"transactionId,omitempty"`
}

// SubmitInvoiceJSONBody defines parameters for SubmitInvoice.
type SubmitInvoiceJSONBody SubmitInvoiceRequest

// SubmitInvoiceRequestBody defines body for SubmitInvoice for application/json ContentType.
type SubmitInvoiceJSONRequestBody SubmitInvoiceJSONBody
